#!/bin/bash

# Import configuration from file
if [ $# -lt 1 ]; then
  echo "Error: At least one argument is required."
  exit 1
fi
CONFIGURATION_FILE=$1

########################################### NO CHANGE NECESSARY BEYOND THAT POINT ###########################################

source $CONFIGURATION_FILE

# Export each variable
for var in PYTHON_SCRIPT INPUT_SCRIPT CONFIGURATION_FILE CONDA_ENVIRONMENT NNODES SUFFIX_JOB PARTITION NHOURS GROUP_ACCOUNT QOS SERPENT_DATA SERPENT_ACELIB SERPENT_DECLIB SERPENT_NFYLIB SERPENT_EXE
do
    export $var
done

# Set SLURM parameters
export PARTITION_CPUS_PER_NODE=$(sinfo -p ${PARTITION} --Node --format="%C" | sed 's/[^0-9\/]*//g' | tr '/' '\n' | sort -n | tail -n 1)
if [ -n "$SUFFIX_JOB" ]; then
  SUFFIX_JOB="_${SUFFIX_JOB}"
fi
export JOB_NAME=$(basename $INPUT_SCRIPT | cut -d. -f1)${SUFFIX_JOB}
mkdir -p ./Logs
export OUTPUT_FILE="./Logs/${JOB_NAME}${SUFFIX_JOB}.o"
export ERROR_FILE="./Logs/${JOB_NAME}${SUFFIX_JOB}.err"
SECONDS=$((NHOURS * 3600))
export TIMELIMIT=$(printf '%02d:%02d:%02d\n' $(($SECONDS/3600)) $(($SECONDS%3600/60)) $(($SECONDS%60)))

# Remove Serpent data if not existing
for var in SERPENT_DATA SERPENT_ACELIB SERPENT_DECLIB SERPENT_NFYLIB; do
    if [ -z "${!var}" ]; then
        unset $var
    fi
done

# Print job information
echo "Running HxF with the following parameters:"
echo "------------------------------------------------------"
echo "Job name: ${JOB_NAME}"
echo "Script: ${PYTHON_SCRIPT}"
echo "Input script: ${INPUT_SCRIPT}"
echo "Group account: ${GROUP_ACCOUNT} (QoS: ${QOS})"
echo "Configuration: ${NNODES} x ${PARTITION} (max ${PARTITION_CPUS_PER_NODE} CPUs/node)"
echo "Environment loaded from: ${CONFIGURATION_FILE} (conda environment: ${CONDA_ENVIRONMENT})"
echo "Serpent path: ${SERPENT_EXE}"
echo "Nuclear data path: ${SERPENT_DATA} (${SERPENT_ACELIB}, ${SERPENT_DECLIB}, ${SERPENT_NFYLIB})"
echo "Time limit: ${NHOURS} hours"
echo "------------------------------------------------------"
sbatch -J $JOB_NAME -o $OUTPUT_FILE -e $ERROR_FILE -A $GROUP_ACCOUNT -c $PARTITION_CPUS_PER_NODE -q $QOS -p $PARTITION -N $NNODES -n $NNODES -t $TIMELIMIT --exclusive Utils/exe.sub
